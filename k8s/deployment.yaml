# Kubernetes Deployment Configuration for EnergyOpti-Pro
# Supports horizontal scaling, auto-scaling, and rolling updates

apiVersion: apps/v1
kind: Deployment
metadata:
  name: energyopti-backend
  namespace: energyopti-pro
  labels:
    app: energyopti-backend
    version: v2.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: energyopti-backend
  template:
    metadata:
      labels:
        app: energyopti-backend
        version: v2.0.0
    spec:
      containers:
      - name: backend
        image: energyopti-pro/backend:latest
        ports:
        - containerPort: 8000
        env:
        - name: REDIS_CLUSTER_HOSTS
          value: "redis-cluster-0.redis-cluster:6379,redis-cluster-1.redis-cluster:6379,redis-cluster-2.redis-cluster:6379"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: energyopti-secrets
              key: database-url
        - name: LOG_LEVEL
          value: "INFO"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: app-data
          mountPath: /app/data
      volumes:
      - name: app-data
        persistentVolumeClaim:
          claimName: energyopti-data-pvc
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: energyopti-backend-service
  namespace: energyopti-pro
spec:
  selector:
    app: energyopti-backend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8000
  type: ClusterIP

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: energyopti-backend-hpa
  namespace: energyopti-pro
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: energyopti-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: energyopti-frontend
  namespace: energyopti-pro
  labels:
    app: energyopti-frontend
    version: v2.0.0
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: energyopti-frontend
  template:
    metadata:
      labels:
        app: energyopti-frontend
        version: v2.0.0
    spec:
      containers:
      - name: frontend
        image: energyopti-pro/frontend:latest
        ports:
        - containerPort: 3000
        env:
        - name: REACT_APP_API_URL
          value: "http://energyopti-backend-service"
        - name: REACT_APP_WS_URL
          value: "ws://energyopti-backend-service/ws"
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: energyopti-frontend-service
  namespace: energyopti-pro
spec:
  selector:
    app: energyopti-frontend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: energyopti-ingress
  namespace: energyopti-pro
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - energyopti-pro.com
    - www.energyopti-pro.com
    secretName: energyopti-tls
  rules:
  - host: energyopti-pro.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: energyopti-backend-service
            port:
              number: 80
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: energyopti-backend-service
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: energyopti-frontend-service
            port:
              number: 80

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: energyopti-data-pvc
  namespace: energyopti-pro
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard

---
apiVersion: v1
kind: Secret
metadata:
  name: energyopti-secrets
  namespace: energyopti-pro
type: Opaque
data:
  database-url: c3FsaXRlOi8vL2VuZXJneW9wdGktcHJvLmRi  # base64 encoded
  redis-password: cmVkaXNfcGFzc3dvcmQ=  # base64 encoded
