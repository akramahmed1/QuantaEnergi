version: '3.8'

services:
  # Redis Cluster for QuantaEnergi
  redis-node-1:
    image: redis:7-alpine
    container_name: quantaenergi-redis-node-1
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data-1:/data
    networks:
      - quantaenergi-network
    environment:
      - REDIS_CLUSTER_CREATOR=yes
      - REDIS_CLUSTER_REPLICAS=1

  redis-node-2:
    image: redis:7-alpine
    container_name: quantaenergi-redis-node-2
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "6380:6379"
    volumes:
      - redis-data-2:/data
    networks:
      - quantaenergi-network

  redis-node-3:
    image: redis:7-alpine
    container_name: quantaenergi-redis-node-3
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "6381:6379"
    volumes:
      - redis-data-3:/data
    networks:
      - quantaenergi-network

  redis-node-4:
    image: redis:7-alpine
    container_name: quantaenergi-redis-node-4
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "6382:6379"
    volumes:
      - redis-data-4:/data
    networks:
      - quantaenergi-network

  redis-node-5:
    image: redis:7-alpine
    container_name: quantaenergi-redis-node-5
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "6383:6379"
    volumes:
      - redis-data-5:/data
    networks:
      - quantaenergi-network

  redis-node-6:
    image: redis:7-alpine
    container_name: quantaenergi-redis-node-6
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "6384:6379"
    volumes:
      - redis-data-6:/data
    networks:
      - quantaenergi-network

  # Redis Cluster Initialization
  redis-cluster-init:
    image: redis:7-alpine
    container_name: quantaenergi-redis-cluster-init
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
    command: >
      sh -c "
        echo 'Waiting for Redis nodes to be ready...' &&
        sleep 10 &&
        echo 'yes' | redis-cli --cluster create 
          redis-node-1:6379 redis-node-2:6379 redis-node-3:6379 
          redis-node-4:6379 redis-node-5:6379 redis-node-6:6379 
          --cluster-replicas 1 &&
        echo 'Redis cluster initialized successfully!'
      "
    networks:
      - quantaenergi-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: quantaenergi-postgres
    environment:
      POSTGRES_DB: quantaenergi_db
      POSTGRES_USER: quantaenergi_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-quantaenergi_secure_pass}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - quantaenergi-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quantaenergi_user -d quantaenergi_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # QuantaEnergi Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: quantaenergi-backend
    environment:
      - DATABASE_URL=postgresql://quantaenergi_user:${POSTGRES_PASSWORD:-quantaenergi_secure_pass}@postgres:5432/quantaenergi_db
      - REDIS_CLUSTER_NODES=redis-node-1:6379,redis-node-2:6379,redis-node-3:6379,redis-node-4:6379,redis-node-5:6379,redis-node-6:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-quantaenergi_jwt_secret_key}
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=7
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,https://quantaenergi.vercel.app}
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis-cluster-init:
        condition: service_completed_successfully
    networks:
      - quantaenergi-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # QuantaEnergi Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: quantaenergi-frontend
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_APP_NAME=QuantaEnergi
      - VITE_APP_VERSION=${APP_VERSION:-1.0.0}
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - quantaenergi-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: quantaenergi-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - quantaenergi-network
    restart: unless-stopped

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: quantaenergi-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-quantaenergi_grafana_pass}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - quantaenergi-network
    restart: unless-stopped

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: quantaenergi-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - backend
      - frontend
    networks:
      - quantaenergi-network
    restart: unless-stopped

  # Redis Commander (for cluster management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: quantaenergi-redis-commander
    environment:
      - REDIS_HOSTS=local:redis-node-1:6379,local:redis-node-2:6379,local:redis-node-3:6379,local:redis-node-4:6379,local:redis-node-5:6379,local:redis-node-6:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis-cluster-init
    networks:
      - quantaenergi-network
    restart: unless-stopped

volumes:
  redis-data-1:
  redis-data-2:
  redis-data-3:
  redis-data-4:
  redis-data-5:
  redis-data-6:
  postgres-data:
  prometheus-data:
  grafana-data:

networks:
  quantaenergi-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
