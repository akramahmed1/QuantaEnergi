# Docker Compose for Horizontal Scaling
# Run multiple backend instances with Redis clustering

version: '3.8'

services:
  # Redis Cluster
  redis-node-1:
    image: redis:7-alpine
    container_name: redis-node-1
    ports:
      - "6379:6379"
    volumes:
      - redis-data-1:/data
    command: redis-server --appendonly yes --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000
    networks:
      - energyopti-network

  redis-node-2:
    image: redis:7-alpine
    container_name: redis-node-2
    ports:
      - "6380:6379"
    volumes:
      - redis-data-2:/data
    command: redis-server --appendonly yes --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000
    networks:
      - energyopti-network

  redis-node-3:
    image: redis:7-alpine
    container_name: redis-node-3
    ports:
      - "6381:6379"
    volumes:
      - redis-data-3:/data
    command: redis-server --appendonly yes --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000
    networks:
      - energyopti-network

  # Backend Instance 1
  backend-1:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: energyopti-backend-1
    ports:
      - "8001:8000"
    environment:
      - REDIS_CLUSTER_HOSTS=redis-node-1:6379,redis-node-2:6379,redis-node-3:6379
      - REDIS_HOST=redis-node-1
      - REDIS_PORT=6379
      - DATABASE_URL=sqlite:///energyopti_pro.db
      - LOG_LEVEL=INFO
    volumes:
      - ./backend:/app
      - backend-data-1:/app/data
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
    networks:
      - energyopti-network
    restart: unless-stopped

  # Backend Instance 2
  backend-2:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: energyopti-backend-2
    ports:
      - "8002:8000"
    environment:
      - REDIS_CLUSTER_HOSTS=redis-node-1:6379,redis-node-2:6379,redis-node-3:6379
      - REDIS_HOST=redis-node-2
      - REDIS_PORT=6379
      - DATABASE_URL=sqlite:///energyopti_pro.db
      - LOG_LEVEL=INFO
    volumes:
      - ./backend:/app
      - backend-data-2:/app/data
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
    networks:
      - energyopti-network
    restart: unless-stopped

  # Backend Instance 3
  backend-3:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: energyopti-backend-3
    ports:
      - "8003:8000"
    environment:
      - REDIS_CLUSTER_HOSTS=redis-node-1:6379,redis-node-2:6379,redis-node-3:6379
      - REDIS_HOST=redis-node-3
      - REDIS_PORT=6379
      - DATABASE_URL=sqlite:///energyopti_pro.db
      - LOG_LEVEL=INFO
    volumes:
      - ./backend:/app
      - backend-data-3:/app/data
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
    networks:
      - energyopti-network
    restart: unless-stopped

  # Frontend Instance 1
  frontend-1:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: energyopti-frontend-1
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8001
      - REACT_APP_WS_URL=ws://localhost:8001
      - NODE_ENV=production
    depends_on:
      - backend-1
      - backend-2
      - backend-3
    networks:
      - energyopti-network
    restart: unless-stopped

  # Frontend Instance 2
  frontend-2:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: energyopti-frontend-2
    ports:
      - "3001:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8002
      - REACT_APP_WS_URL=ws://localhost:8002
      - NODE_ENV=production
    depends_on:
      - backend-1
      - backend-2
      - backend-3
    networks:
      - energyopti-network
    restart: unless-stopped

  # Load Balancer (Nginx)
  nginx:
    image: nginx:alpine
    container_name: energyopti-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/load_balancer.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/ssl
    depends_on:
      - backend-1
      - backend-2
      - backend-3
      - frontend-1
      - frontend-2
    networks:
      - energyopti-network
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: energyopti-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - energyopti-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: energyopti-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - energyopti-network
    restart: unless-stopped

volumes:
  redis-data-1:
  redis-data-2:
  redis-data-3:
  backend-data-1:
  backend-data-2:
  backend-data-3:
  prometheus-data:
  grafana-data:

networks:
  energyopti-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
