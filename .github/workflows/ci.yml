name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, dev ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run tests
      run: |
        cd backend
        pytest --cov=app --cov=shared --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
    
    - name: Install linting tools
      run: |
        pip install flake8 black isort mypy ruff
    
    - name: Run linting
      run: |
        cd backend
        echo "Running flake8..."
        flake8 app/ shared/ --max-line-length=88 --extend-ignore=E203,W503
        echo "Running black check..."
        black --check app/ shared/ --line-length=88
        echo "Running isort check..."
        isort --check-only app/ shared/ --profile=black
        echo "Running ruff..."
        ruff check app/ shared/ --select=E,W,F,I,N,UP,B,PL
        echo "Running mypy..."
        mypy app/ --ignore-missing-imports --no-strict-optional

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        cd backend
        bandit -r app/ shared/ -f json -o bandit-report.json || true
        echo "Bandit scan completed"
    
    - name: Run Safety check
      run: |
        cd backend
        safety check --json --output safety-report.json || true
        echo "Safety check completed"
    
    - name: Run Snyk security scan
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  build:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Build backend
      run: |
        cd backend
        python -c "import app.main; print('Backend imports successfully')"
        echo "Backend build verification completed"
    
    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
        echo "Frontend build completed"

  deploy-dev:
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    if: github.ref == 'refs/heads/dev'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Deploy to dev environment
      run: |
        echo "Deploying to dev environment..."
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        echo "Deployment would happen here in production"
        echo "Dev deployment completed successfully"
